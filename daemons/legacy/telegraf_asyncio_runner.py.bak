import json
import logging
from kafka import KafkaConsumer
from settings import KAFKA_SERVER, KAFKA_CLIENT_ID, KAFKA_API_VERSION, KAFKA_MONITORING_TOPICS, \
    LOGGING, KAFKA_GROUP_ID, KAFKA_TRANSLATION_TOPIC
from translator.exceptions import VduNotFound, OsmInfoNotFound
from translatora.apps import vcache
from aiokafka import AIOKafkaProducer
import asyncio

logging.config.dictConfig(LOGGING)
logger = logging.getLogger("translator")


def main():
    nfvi_or_app = "telegraf"
    # See more: https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html
    consumer = KafkaConsumer(bootstrap_servers=KAFKA_SERVER, client_id=KAFKA_CLIENT_ID, enable_auto_commit=True,
                             value_deserializer=lambda v: json.loads(v.decode('utf-8', 'ignore')),
                             api_version=KAFKA_API_VERSION, group_id=KAFKA_GROUP_ID[nfvi_or_app])
    consumer.subscribe(pattern=KAFKA_MONITORING_TOPICS[nfvi_or_app])
    metric_types = ['bytes_recv', 'bytes_sent']

    for msg in consumer:
        try:
            metric = msg.value
            # Skip not useful metrics
            fields = metric.get("fields", {})
            if 'bytes_sent' not in fields.keys():
                continue
            metric_str = json.dumps(metric)
            loop = asyncio.get_event_loop()

            async def push_metrics(metric_str):
                """Push metric(s) in the topic of Kafka"""
                metric = json.loads(metric_str)
                # Find the VDU uuid
                vdu_uuid_upper = metric.get("tags", {}).get('host', None)
                if vdu_uuid_upper is None:
                    return
                vdu_uuid = vdu_uuid_upper.lower()
                # Get cluster layout and initial topic/partition leadership information
                producer = AIOKafkaProducer(loop=loop, bootstrap_servers=KAFKA_SERVER)
                await producer.start()
                await asyncio.sleep(0.2)
                try:
                    # Generate a standard structure for each metric
                    telegraf_translator = vcache.Metric(raw_metric=metric)
                    for metric_type in metric_types:
                        metric_translation = telegraf_translator.get_translation(vdu_uuid, resource=nfvi_or_app,
                                                                                 metric_type=metric_type)
                    metric_translation_str = json.dumps(metric_translation)
                    await producer.send_and_wait(KAFKA_TRANSLATION_TOPIC, str.encode(metric_translation_str))
                finally:
                    # Wait for all pending messages to be delivered or expire.
                    await producer.stop()

            loop.run_until_complete(push_metrics(metric_str))

        except (VduNotFound, OsmInfoNotFound) as exc:
            logger.warning(exc)
        except asyncio.CancelledError:
            logger.error('AsyncIO timeout')
        except Exception as ex:
            logger.exception(ex)


if __name__ == '__main__':
    main()
